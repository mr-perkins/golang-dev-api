services:
  api:
    # image: golang-dev-api
    container_name: golang-dev-api
    build:
      # context: ./cmd/api
      dockerfile: ./cmd/api/Dockerfile
      target: builder
    develop:
      watch:
        - action: sync+restart
          path: ./cmd/api
          target: /api
    env_file: .env
    # volumes:
    #   - app:/app
    # secrets:
    #   - db-password
    # ports:
    #   - "${API_PORT}:8000"
    # networks:
    #   - dev-api
    # command: go run main.go
    depends_on: 
      database:       
        condition: service_healthy

  database:
    container_name: golang-dev-api-database
    image: postgres 
    restart: unless-stopped
    user: postgres
    # secrets:
    #   - db-password
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}   
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - "${DB_PORT}:5432"
    # networks:
    #   - dev-api
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
  #     PGADMIN_DEFAULT_PASSWORD: password
  #     PGADMIN_LISTEN_PORT: 80
  #   ports:
  #     - 15432:80
  #   volumes:
  #     - /var/lib/pgadmin
  #   depends_on:
  #     - db

  proxy:
    container_name: golang-dev-api-proxy
    image: nginx
    volumes:
      - type: bind
        source: ./proxy/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - "${PROXY_PORT}:8080"
    # networks:
    #   - dev-api
    depends_on: 
      - api

volumes:
  database:

# networks: 
#   dev-api:
#     driver: bridge
#     external: true

# secrets:
#   server-certificate:  
#       external: true
#   db-password:
#     file: db/password.txt